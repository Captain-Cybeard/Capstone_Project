Project Implementation Estimates:

Authentication:									--> Estimate (hours):
   --> Take URL and figure out which type of authentication is 			   --> *Note: Initially, if we're only doing VMWare, we'll know what the API wants, 
       needed for the given VM.							       but if we expand the application to include other VM sources, this will 
										       get more tricky*
   --> Based on the type of authentication, return the necessary	           --> 10 (if it's basic auth, but this could also get much more complex)
       data that the API layer needs to correctly authenticate.

API:
   --> Make API call to get folder structure from VM				   --> 90
       server.

      --> Use the data that the authentication layer returns			   
	  to generate this API call.

      --> Folder structure should be returned in the form of			   
	  a data structure that the front end can use to display
	  a list of the VM's to the user.(?)

   --> Make API call to get the actual VM's.					   --> 60

      --> This should take a data structure generated by the 			   
	  Django web app (based on the user's selections) that 
	  it will use to make the API call.

      --> This API call should result in the VM's being downloaded		   
	  to the user's machine.

	

		
Django Web Application:
   --> Frontend:                                                      --> Backend:							      --> Estimate (hours):
 
      --> Textbox for user to enter VM server URL into.	                 --> Pass the data from this URL to the authentication layer.            --> 15

      -->Popup that asks a user for authentication.		         --> User login info will be passed to auth layer and will be 	         --> 30
         --> Indication that the authentication was                          checked against API.
             successful/unsuccessful/                                       

      --> List structure that takes returned data from API and           --> If this check is correct the application will make the              --> 60
          organizes it so that a user can select                             the API call to get the VM's folder structure, then 
          their specific VM(s).                                              send it back.

      --> Buttons that allow a user to confirm their                     --> If the confirm button is selected, the VM's that were               --> 50              
          selection.                                                         asked for by the user will be turned into an API call
               								     that will be sent to the given VM website.

      --> Indication that VM's were successfully/unsuccessfully 	 --> Based on what the VM server tells us, we tell the user              --> 5
          downloaded based on the users selection.			     if we got what they wanted.
